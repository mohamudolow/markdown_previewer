{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","highlightJs","renderer","Renderer","link","href","title","text","concat","setOptions","highlight","code","highlightAuto","value","breaks","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","placeholder","updateMarkdown","bind","assertThisInitialized","event","setState","target","react_default","a","createElement","className","id","Form","FormGroup","controlId","FormLabel","FormControl","as","rows","onChange","dangerouslySetInnerHTML","__html","React","Component","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAKMA,EAASC,EAAQ,IACjBC,EAAcD,EAAQ,IAEtBE,EAAW,IAAIH,EAAOI,SAC5BD,EAASE,KAAO,SAASC,EAAMC,EAAOC,GACpC,iBAAAC,OAAkBH,EAAlB,qBAAAG,OAA0CD,EAA1C,SAEFR,EAAOU,WAAW,CAChBP,WACAQ,UAAW,SAASC,GAClB,OAAOV,EAAYW,cAAcD,GAAME,OAEzCC,QAAQ,QAGJC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAUC,GAEZT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IALLA,8EAOJa,GACbV,KAAKW,SAAS,CACZN,SAAUK,EAAME,OAAOnB,yCAI3B,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,wBAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQD,UAAU,YAC1BH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UACRJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWC,UAAU,wBACvBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWL,UAAU,MAArB,mBACAH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAaL,GAAG,WAAWM,GAAG,WAAWC,KAAK,KAAKlB,YAAY,iBAAiBb,MAAOO,KAAKI,MAAMC,SAAUoB,SAAUzB,KAAKO,qBAM3HM,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAASD,UAAU,YAC3BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,oBACAH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACRJ,EAAAC,EAAAC,cAAA,OAAKW,wBAA2B,CAACC,OAAQhD,EAAOqB,KAAKI,MAAMC,wBArC7CuB,IAAMC,WA+ClBvB,EAAW,8+BA6CjBwB,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SAElCvC,QCtGKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNT,IAASC,OAAOlB,EAAAC,EAAAC,cAACyB,EAAD,MAASP,SAASC,eAAe,SD2H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8693510b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport {Form, FormGroup, FormControl, FormLabel} from 'react-bootstrap';\n\nconst marked = require('marked');\nconst highlightJs = require('highlight.js');\n\nconst renderer = new marked.Renderer();\nrenderer.link = function(href, title, text) {\n  return `<a href=${href} target=\"_blank\">${text}</a>`;\n}\nmarked.setOptions({\n  renderer,\n  highlight: function(code) {\n    return highlightJs.highlightAuto(code).value;\n  },\n  breaks: true\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    };\n    this.updateMarkdown = this.updateMarkdown.bind(this);\n  }\n  updateMarkdown(event) {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\nrender() {\n  return (\n    <div className=\"App container\">\n    <div className=\"header row\">\n    <div className=\"col-sm-12\"> \n    <h1 className=\"h1\">Markdown Previewer</h1>\n    </div>\n    </div>\n    \n    <div className=\"main row\">\n    <div id=\"input\" className=\"col-sm-6\">\n    <div id=\"editor\">\n    <Form>\n      <FormGroup controlId=\"formControlsTextarea\">\n    <FormLabel className=\"h2\">Markdown Input:</FormLabel>\n    <FormControl id=\"textarea\" as=\"textarea\" rows=\"18\" placeholder=\"Enter Markdown\" value={this.state.markdown} onChange={this.updateMarkdown}/>\n    </FormGroup>\n    </Form>\n    </div>\n    </div>\n    \n    <div id=\"output\" className=\"col-sm-6\">\n    <h2 className=\"h2\">Markdown Output:</h2>\n    <div id=\"preview\">\n    <div dangerouslySetInnerHTML = {{__html: marked(this.state.markdown)}}>\n    </div>\n    </div>\n    </div>\n</div>\n    </div>\n  );\n}\n}\n\nconst placeholder = \n      `### Headers\n\n# Header 1\n## Header 2 \n\n\n### Text Decorations\n\n*Italic*\n**Bold**\n***Bold & Italic***\n\n### List\n- List one\n- List two\n- List three\n\n### Links\n[FreeCodeCamp] (http://www.freecodecamp.org \"The most popular free programming resource for beginner developers who are learning to code\")\n[Facebook] (http:www.facebook.com \"The most popular social media site\")\n[JavaScript] (https://developer.mozilla.org/en-US/docs/Web/JavaScript \"A programming language for the web\")\n\n### Image\n![Alt text](https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=366&q=80 'some code')\n\n### Blockquote\n> “There are two motives for reading a book; one, that you enjoy it; the other, that you can boast about it [on Goodreads].” - Bertrand Russell\n\n### Code\n\\`npm install create-react-app\\`\n\\`\\`\\`\n\nfunction squareNumber(a) {\n  return a * a;\n}\n\nconst j = 4;\nsquareNumber(j)\n/*const k = 19;*/\n\n\n\\`\\`\\`\n`;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}